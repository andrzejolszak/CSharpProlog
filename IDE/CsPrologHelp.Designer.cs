//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Prolog {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class CsPrologHelp {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CsPrologHelp() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Prolog.CsPrologHelp", typeof(CsPrologHelp).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  \+( +P)
        ///  
        ///    Succeeds if predicate P fails. Same as not_1.
        ///  
        ///.
        /// </summary>
        public static string ___1 {
            get {
                return ResourceManager.GetString("\\+_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string @__if_ {
            get {
                return ResourceManager.GetString("\'!if\'", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  Conditional definition symbols can be used to include or exclude portions of a source file.
        ///  Available symbols are:
        ///  
        ///  !define &lt;atom&gt;
        ///  !if &lt;atom&gt;
        ///  !ifnot &lt;atom&gt;
        ///  !else
        ///  !elseif &lt;atom&gt;
        ///  !endif
        ///  !undefine &lt;atom&gt;
        ///  
        ///  A conditional definition symbol must be the first symbol on a line.
        ///  Conditional definition directives must be written as sets consisting of, in order,
        ///  an !if directive, zero or more !elseif directives, zero or one !else directive, and
        ///  an !endif directive. Betwee [rest of string was truncated]&quot;;.
        /// </summary>
        public static string @__if___ {
            get {
                return ResourceManager.GetString("\'!if\'/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string _bool {
            get {
                return ResourceManager.GetString("bool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string _float {
            get {
                return ResourceManager.GetString("float", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string _is {
            get {
                return ResourceManager.GetString("is", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string _string {
            get {
                return ResourceManager.GetString("string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2_3.
        /// </summary>
        public static string _throw {
            get {
                return ResourceManager.GetString("throw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string _true {
            get {
                return ResourceManager.GetString("true", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string abolish {
            get {
                return ResourceManager.GetString("abolish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  abolish( +P/N)
        ///  
        ///    Remove predicate P/N from the database.
        ///  
        ///.
        /// </summary>
        public static string abolish_1 {
            get {
                return ResourceManager.GetString("abolish_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string append {
            get {
                return ResourceManager.GetString("append", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  append( ?X, ?Y, ?Z)
        ///  
        ///    Z is the list consisting of list X appended with list Y. Backtrackable.
        ///  
        ///.
        /// </summary>
        public static string append_3 {
            get {
                return ResourceManager.GetString("append_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string append2 {
            get {
                return ResourceManager.GetString("append2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  append2( +X, +Y, -Z)
        ///  
        ///    Z is the list consisting of list X appended with list Y.
        ///    Faster than append_2, but not backtrackable.
        ///  
        ///.
        /// </summary>
        public static string append2_3 {
            get {
                return ResourceManager.GetString("append2_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string arg {
            get {
                return ResourceManager.GetString("arg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  arg( ?N, ?T, ?A)
        ///  
        ///    Succeeds if A is the Nth argument of T.
        ///  
        ///.
        /// </summary>
        public static string arg_3 {
            get {
                return ResourceManager.GetString("arg_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string assert {
            get {
                return ResourceManager.GetString("assert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  assert( +C)
        ///  
        ///    Add clause C to the program database and succeed.
        ///    Equivalent to assertz_1
        ///  
        ///.
        /// </summary>
        public static string assert_1 {
            get {
                return ResourceManager.GetString("assert_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string asserta {
            get {
                return ResourceManager.GetString("asserta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  asserta( +C)
        ///  
        ///    Add clause C to the beginning of the program database and succeed.
        ///  
        ///.
        /// </summary>
        public static string asserta_1 {
            get {
                return ResourceManager.GetString("asserta_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string assertz {
            get {
                return ResourceManager.GetString("assertz", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  assertz( +C)
        ///  
        ///    Add clause C to the end of the program database and succeed.
        ///  
        ///.
        /// </summary>
        public static string assertz_1 {
            get {
                return ResourceManager.GetString("assertz_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string atom {
            get {
                return ResourceManager.GetString("atom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  atom( ?A)
        ///  
        ///    true if A is an atom, false otherwise.
        ///  
        ///.
        /// </summary>
        public static string atom_1 {
            get {
                return ResourceManager.GetString("atom_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string atom_string {
            get {
                return ResourceManager.GetString("atom_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  atom_string( ?A, ?S)
        ///  
        ///    Converts atom A to string S or vice versa.
        ///  
        ///.
        /// </summary>
        public static string atom_string_2 {
            get {
                return ResourceManager.GetString("atom_string_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string atomic {
            get {
                return ResourceManager.GetString("atomic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  atom( ?A)
        ///  
        ///    true if A is an atom or a number, false otherwise.
        ///  
        ///.
        /// </summary>
        public static string atomic_1 {
            get {
                return ResourceManager.GetString("atomic_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string bagof {
            get {
                return ResourceManager.GetString("bagof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  bagof( +T, +P, -L)
        ///  
        ///    L contains the list with terms X that satisfy P.
        ///    Duplicates will not be removed (cf. setof_3)
        ///  
        ///.
        /// </summary>
        public static string bagof_3 {
            get {
                return ResourceManager.GetString("bagof_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string batch {
            get {
                return ResourceManager.GetString("batch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  It is possible to call the Prolog engine from within a batch file, using pld.exe. When
        ///  pld.exe is called with arguments, it is automatically assumed that Prolog must be
        ///  started up in batch mode. The first argument specifies the query that should be
        ///  carried out; the optional second argument specifies the number of times backtracking
        ///  should be applied. The default is 0; if a * is specified, backtracking will take place
        ///  as often as possible. If an error occurs, the error message is display [rest of string was truncated]&quot;;.
        /// </summary>
        public static string batch__ {
            get {
                return ResourceManager.GetString("batch/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string between {
            get {
                return ResourceManager.GetString("between", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  between( +L, +H, -N)
        ///  
        ///    Upon the first call, N is set equal to L. Upon backtracking, N
        ///    is increased by 1, and the predicate succeeds as long as N &lt;= H.
        ///  
        ///.
        /// </summary>
        public static string between_3 {
            get {
                return ResourceManager.GetString("between_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  bool( X)
        ///  
        ///    Succeeds if X is a bool term.
        ///  
        ///.
        /// </summary>
        public static string bool_1 {
            get {
                return ResourceManager.GetString("bool_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string bw_transform {
            get {
                return ResourceManager.GetString("bw_transform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  bw_transform( ?P, ?E, ?I)
        ///  
        ///    Burrows-Wheeler Transform. For a description and explanation cf. internet,
        ///    e.g. https://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform
        ///    P and E are strings, I integer. E is the transformed version of P.
        ///    I is the reference position (number of rotations) that comes out as a result 
        ///    of the encoding and that you need for the decoding.
        ///  
        ///.
        /// </summary>
        public static string bw_transform_2 {
            get {
                return ResourceManager.GetString("bw_transform_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string call {
            get {
                return ResourceManager.GetString("call", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  call( P)
        ///  
        ///    Execute predicate P.
        ///  
        ///.
        /// </summary>
        public static string call_1 {
            get {
                return ResourceManager.GetString("call_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string chat {
            get {
                return ResourceManager.GetString("chat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  chat
        ///  
        ///    Run the sample CHAT80 program.
        ///  
        ///.
        /// </summary>
        public static string chat_0 {
            get {
                return ResourceManager.GetString("chat_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string chat80 {
            get {
                return ResourceManager.GetString("chat80", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  CHAT-80 (Fernando Pereira) (http://www.cis.upenn.edu/~pereira/oldies.html)
        ///  
        ///  See demo.txt and docu in the CHAT-directory for examples.
        ///  Start CHAT by entering &apos;hi.&apos;, end by entering &apos;bye.&apos;
        ///  
        ///  The CHAT-software is copyrighted !!!  (although I do not think Fernando
        ///  Pereira still cares -- unfortunately he never responded to mails)
        ///  
        ///.
        /// </summary>
        public static string chat80__ {
            get {
                return ResourceManager.GetString("chat80/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string clause {
            get {
                return ResourceManager.GetString("clause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  clause( Head, Body)
        ///  
        ///    Retrieve a clause with head Head and body Body from the program database.
        ///  
        ///.
        /// </summary>
        public static string clause_2 {
            get {
                return ResourceManager.GetString("clause_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string clearall {
            get {
                return ResourceManager.GetString("clearall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  clearall
        ///  
        ///    Reinitialize the Prolog engine.
        ///  
        ///.
        /// </summary>
        public static string clearall_0 {
            get {
                return ResourceManager.GetString("clearall_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string clearprofile {
            get {
                return ResourceManager.GetString("clearprofile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  clearprofile
        ///  
        ///    Reset all profilecount values to zero. See the profile_1 command
        ///  
        ///.
        /// </summary>
        public static string clearprofile_0 {
            get {
                return ResourceManager.GetString("clearprofile_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string clipboard {
            get {
                return ResourceManager.GetString("clipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  clipboard( +T)
        ///  
        ///    Copy the string representation of term T to the clipboard.
        ///  
        ///    This works reliably in the Windows version only; it appears
        ///    notoriouly difficult to get this to work in a console app
        ///    (sometimes it works, sometimes it doesn&apos;t)
        ///  
        ///.
        /// </summary>
        public static string clipboard_1 {
            get {
                return ResourceManager.GetString("clipboard_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string cls {
            get {
                return ResourceManager.GetString("cls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  cls
        ///  
        ///    Clear the screen.
        ///  
        ///.
        /// </summary>
        public static string cls_0 {
            get {
                return ResourceManager.GetString("cls_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string combination {
            get {
                return ResourceManager.GetString("combination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  combination( +L1, +K, ?L2)
        ///  
        ///    Backtrackable predicate. L2 is the list with a K-combination of the elements in list L1.
        ///    Backtracking yields all possible combinations. 
        ///  
        ///    The predicate fails when called after the last combination, or when the result of a
        ///    permutation cannot be unified with L2.
        ///  
        ///.
        /// </summary>
        public static string combination_3 {
            get {
                return ResourceManager.GetString("combination_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string complexnumber {
            get {
                return ResourceManager.GetString("complexnumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  complexnumber( ?N)
        ///  
        ///    Returns true if N is a complex number of the format a+ib,
        ///    where a and b are real numbers; return false otherwise.
        ///  
        ///.
        /// </summary>
        public static string complexnumber_1 {
            get {
                return ResourceManager.GetString("complexnumber_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string compound {
            get {
                return ResourceManager.GetString("compound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  compound( +X)
        ///  
        ///    Succeeds if X is a compound term, i.e. if it has arguments.
        ///  
        ///.
        /// </summary>
        public static string compound_1 {
            get {
                return ResourceManager.GetString("compound_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string config_setting {
            get {
                return ResourceManager.GetString("config_setting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  config_setting( ?N, ?V)
        ///  
        ///    Shows the configuration file settings. N is name, V is value.
        ///    Upon backtracking, the next setting is obtained.
        ///  
        ///.
        /// </summary>
        public static string config_setting_2 {
            get {
                return ResourceManager.GetString("config_setting_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string console {
            get {
                return ResourceManager.GetString("console", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  console( ?X)
        ///  
        ///    Write term X to the console (standard output if set by tell_1 is ignored).
        ///    The output is terminated with a newline.
        ///  
        ///.
        /// </summary>
        public static string console_1 {
            get {
                return ResourceManager.GetString("console_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  console( S, L)
        ///  
        ///    Write C#-style format string S with arguments in list A to the console.
        ///    The output is terminated with a newline.
        ///  
        ///.
        /// </summary>
        public static string console_2 {
            get {
                return ResourceManager.GetString("console_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string consult {
            get {
                return ResourceManager.GetString("consult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  consult( +F)
        ///  consult( [+F0, +F1, ...])
        ///  
        ///    Consult a file or a list of files
        ///  
        ///.
        /// </summary>
        public static string consult_1 {
            get {
                return ResourceManager.GetString("consult_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string copy_term {
            get {
                return ResourceManager.GetString("copy_term", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  copy_term( +X, -Y)
        ///  
        ///    Y is a fresh copy of X
        ///  
        ///.
        /// </summary>
        public static string copy_term_2 {
            get {
                return ResourceManager.GetString("copy_term_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string crossref {
            get {
                return ResourceManager.GetString("crossref", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  crossref( filename[.csv])
        ///  
        ///    Generate a cross reference table for all predicates making up
        ///    the &apos;program&apos; and store the result as a (.csv) spreadsheet.
        ///  
        ///.
        /// </summary>
        public static string crossref_1 {
            get {
                return ResourceManager.GetString("crossref_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string csprolog_dll {
            get {
                return ResourceManager.GetString("csprolog_dll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  How to use a PrologEngine from within another program?
        ///  
        ///  The PrologEngine class offers two public methods for this purpose:
        ///  
        ///  - GetAllSolutions (...)
        ///  - GetAllSolutionsXml (...)
        ///  
        ///   public SolutionSet GetAllSolutions (string sourceFileName, string query, int maxSolutionCount)
        ///   public SolutionSet GetAllSolutions (string sourceFileName, string query)
        ///  
        ///  The purpose of this method is to find all solutions for query &apos;query&apos;, with a maximum number
        ///  of solutions &apos;maxSolutionCount&apos;.  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string csprolog_dll__ {
            get {
                return ResourceManager.GetString("csprolog_dll/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string current_op {
            get {
                return ResourceManager.GetString("current_op", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  current_op( ?P, ?F, ?N)
        ///  
        ///    Succeeds if an operator exists with precedence P, &apos;fix&apos; F (xfy etc.), and name N.
        ///  
        ///.
        /// </summary>
        public static string current_op_3 {
            get {
                return ResourceManager.GetString("current_op_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string date_part {
            get {
                return ResourceManager.GetString("date_part", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  date_part( +D, ?P)
        ///  
        ///    Unify P with the date part of DateTime D (time is set to 00:00:00)
        ///  
        ///.
        /// </summary>
        public static string date_part_2 {
            get {
                return ResourceManager.GetString("date_part_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_4/7.
        /// </summary>
        public static string datetime {
            get {
                return ResourceManager.GetString("datetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  datetime( ?X)
        ///  
        ///    Succeeds if X is a Prolog term of type DateTime
        ///  
        ///.
        /// </summary>
        public static string datetime_1 {
            get {
                return ResourceManager.GetString("datetime_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  datetime( ?DT, ?Y, ?Mo, ?D)
        ///  
        ///    If DT is an instantiated DateTime term, the interpreter will attempt to
        ///    bind its constituent parts (Year, Month, etc) to the remaining arguments.
        ///  
        ///    Id DT is a var, the other arguments must all be instantiated, and these
        ///    will be used to populate a DateTime term that will be bound to DT.
        ///  
        ///    In all other cases, datetime_4 will fail.
        ///  
        ///.
        /// </summary>
        public static string datetime_4 {
            get {
                return ResourceManager.GetString("datetime_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  datetime( ?DT, ?Y, ?Mo, ?D, ?H, ?Mi, ?S)
        ///  
        ///    If DT is an instantiated DateTime term, the interpreter will attempt to
        ///    bind its constituent parts (Year, Month, etc) to the remaining arguments.
        ///  
        ///    Id DT is a var, the other arguments must all be instantiated, and these
        ///    will be used to populate a DateTime term that will be bound to DT.
        ///  
        ///    In all other cases, datetime/7 will fail.
        ///  
        ///.
        /// </summary>
        public static string datetime_7 {
            get {
                return ResourceManager.GetString("datetime/7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _4.
        /// </summary>
        public static string dayname {
            get {
                return ResourceManager.GetString("dayname", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  dayname( Y, M, D, N)
        ///  
        ///    N is the name of the day for date Y, M, D.
        ///  
        ///.
        /// </summary>
        public static string dayname_4 {
            get {
                return ResourceManager.GetString("dayname_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _4.
        /// </summary>
        public static string dayofweek {
            get {
                return ResourceManager.GetString("dayofweek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  dayofweek( Y, M, D, N)
        ///  
        ///    N is the ordinal number of the day of the week for date Y, M, D (Sunday = 0).
        ///  
        ///.
        /// </summary>
        public static string dayofweek_4 {
            get {
                return ResourceManager.GetString("dayofweek_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _4.
        /// </summary>
        public static string dayofyear {
            get {
                return ResourceManager.GetString("dayofyear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  dayofyear( Y, M, D, N)
        ///  
        ///    N is the ordinal number of the day of the year for date Y, M, D (January 1 = 1).
        ///  
        ///.
        /// </summary>
        public static string dayofyear_4 {
            get {
                return ResourceManager.GetString("dayofyear_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string debug {
            get {
                return ResourceManager.GetString("debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  debug
        ///  
        ///    Switch debugging on..
        ///  
        ///.
        /// </summary>
        public static string debug_0 {
            get {
                return ResourceManager.GetString("debug_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string dec_counter {
            get {
                return ResourceManager.GetString("dec_counter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  dec_counter( +C)
        ///  
        ///    Decrease global counter C (atom of positive integer) by 1
        ///    The counter must have been set by set_counter_1.
        ///  
        ///.
        /// </summary>
        public static string dec_counter_1 {
            get {
                return ResourceManager.GetString("dec_counter_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  dec_counter( +C, ?M)
        ///  
        ///    Decrease global counter C (atom of positive integer) by 1 and try to unify the result with M.
        ///  
        ///.
        /// </summary>
        public static string dec_counter_2 {
            get {
                return ResourceManager.GetString("dec_counter_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_1.
        /// </summary>
        public static string display {
            get {
                return ResourceManager.GetString("display", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  display( X)
        ///  
        ///    Write X to the current output in function notation, e.g. a+b -&gt; +( a, b)
        ///  
        ///.
        /// </summary>
        public static string display_1 {
            get {
                return ResourceManager.GetString("display_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string environment {
            get {
                return ResourceManager.GetString("environment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  environment( +E, ?V)
        ///  
        ///    Get the value V of OS environment variable E. Possible values for E are:
        ///  
        ///    applicationdata
        ///    commandline
        ///    cookies
        ///    currentdirectory
        ///    desktopdirectory
        ///    internetcache
        ///    localapplicationdata
        ///    machinename
        ///    newline
        ///    osversion
        ///    programfiles
        ///    stacktrace
        ///    startup
        ///    systemdirectory
        ///    tickcount
        ///    userdomainname
        ///    userinteractive
        ///    username
        ///    version
        ///    workingset
        ///  
        ///.
        /// </summary>
        public static string environment_2 {
            get {
                return ResourceManager.GetString("environment_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string errorlevel {
            get {
                return ResourceManager.GetString("errorlevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  errorlevel( +N)
        ///  
        ///    Set DOS ERRORLEVEL environment variable to N
        ///  
        ///.
        /// </summary>
        public static string errorlevel_1 {
            get {
                return ResourceManager.GetString("errorlevel_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string expand_term {
            get {
                return ResourceManager.GetString("expand_term", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  expand_term( P--&gt;Q, R)
        ///  
        ///    For DCG grammars. Consult the internet on this.
        ///  
        ///.
        /// </summary>
        public static string expand_term_2 {
            get {
                return ResourceManager.GetString("expand_term_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string fail {
            get {
                return ResourceManager.GetString("fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  fail
        ///  
        ///    Fail.
        ///  
        ///.
        /// </summary>
        public static string fail_0 {
            get {
                return ResourceManager.GetString("fail_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string fail_if_undefined {
            get {
                return ResourceManager.GetString("fail_if_undefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  :- fail_if_undefined( Predicate/Arity)
        ///  
        ///    Directive. Fails if Predicate/Arity is not defined
        ///    (normal behaviour would be to raise an exception).
        ///  
        ///.
        /// </summary>
        public static string fail_if_undefined_1 {
            get {
                return ResourceManager.GetString("fail_if_undefined_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string fileexists {
            get {
                return ResourceManager.GetString("fileexists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  fileexists( +F)
        ///  
        ///    Succeeds if file F exists. Default extension is &apos;.pl&apos;.
        ///    If no path is provided, the working directory will be searched
        ///    (see workingdir_0_1).
        ///  
        ///.
        /// </summary>
        public static string fileexists_2 {
            get {
                return ResourceManager.GetString("fileexists_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string findall {
            get {
                return ResourceManager.GetString("findall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  findall( +T, +P, -L)
        ///  
        ///    Currently identical to setof( T, P, L).
        ///  
        ///.
        /// </summary>
        public static string findall_3 {
            get {
                return ResourceManager.GetString("findall_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string flat {
            get {
                return ResourceManager.GetString("flat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  flat( +X, ?Y)
        ///  
        ///    Y is X with all (nested) lists flattened.
        ///  
        ///.
        /// </summary>
        public static string flat_2 {
            get {
                return ResourceManager.GetString("flat_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  float( +X)
        ///  
        ///    Succeeds if X is a (possibly signed) floating number.
        ///  
        ///.
        /// </summary>
        public static string float_1 {
            get {
                return ResourceManager.GetString("float_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string format {
            get {
                return ResourceManager.GetString("format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  
        ///  format( +S, +L, ?A)
        ///  
        ///    Succeeds if A is the result of formatting string S with placeholders {0}, {1} etc.,
        ///    and a corresponding list of arguments in list L (or a single value if there is only
        ///    one argument). Formatting is identical to C#-formatting.
        ///  
        ///.
        /// </summary>
        public static string format_3 {
            get {
                return ResourceManager.GetString("format_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string functions {
            get {
                return ResourceManager.GetString("functions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    Enter &apos;help( is).&apos; for seeing all available functions for expression evaluation with is_2.
        ///  
        ///.
        /// </summary>
        public static string functions__ {
            get {
                return ResourceManager.GetString("functions/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string functor {
            get {
                return ResourceManager.GetString("functor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  functor( ?T, ?F, ?N)
        ///  
        ///    Succeeds if F is the principal functor of T and N is the arity of F.
        ///  
        ///.
        /// </summary>
        public static string functor_3 {
            get {
                return ResourceManager.GetString("functor_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string gensym {
            get {
                return ResourceManager.GetString("gensym", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  gensym( -V)
        ///  
        ///    Return an atom with format v&lt;n&gt;, n an integer unique to the session.
        ///  
        ///.
        /// </summary>
        public static string gensym_1 {
            get {
                return ResourceManager.GetString("gensym_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  gensym( +A, -V)
        ///  
        ///    A is an atom.
        ///    Return an atom with format A&lt;n&gt;, n an integer unique to the session.
        ///  
        ///.
        /// </summary>
        public static string gensym_2 {
            get {
                return ResourceManager.GetString("gensym_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string get {
            get {
                return ResourceManager.GetString("get", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  get( ?N)
        ///  
        ///    Read the next character from the input stream and unify it with N (ASCII value).
        ///    In doing so, skip all non-printable charactes
        ///  
        ///.
        /// </summary>
        public static string get_1 {
            get {
                return ResourceManager.GetString("get_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string get_counter {
            get {
                return ResourceManager.GetString("get_counter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  get_counter( +C, ?V)
        ///  
        ///    Get the value of global counter C and and unify it with V.
        ///  
        ///.
        /// </summary>
        public static string get_counter_2 {
            get {
                return ResourceManager.GetString("get_counter_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string get0 {
            get {
                return ResourceManager.GetString("get0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  get0( ?N)
        ///  
        ///    Read the next character from the input stream and unify it with N (ASCII value)
        ///  
        ///.
        /// </summary>
        public static string get0_1 {
            get {
                return ResourceManager.GetString("get0_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string getenvvar {
            get {
                return ResourceManager.GetString("getenvvar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  getenvvar( +N, ?V)
        ///  
        ///    Unify V with the value of environment variable N
        ///  
        ///.
        /// </summary>
        public static string getenvvar_1 {
            get {
                return ResourceManager.GetString("getenvvar_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string ground {
            get {
                return ResourceManager.GetString("ground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  ground( ?X)
        ///  
        ///    Succeeds if X is a ground term (i.e. does not contain any unbound variables)
        ///  
        ///.
        /// </summary>
        public static string ground_1 {
            get {
                return ResourceManager.GetString("ground_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string halt {
            get {
                return ResourceManager.GetString("halt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  halt
        ///  
        ///    Exits Prolog
        ///  
        ///.
        /// </summary>
        public static string halt_0 {
            get {
                return ResourceManager.GetString("halt_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0_1.
        /// </summary>
        public static string help {
            get {
                return ResourceManager.GetString("help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  help
        ///  
        ///    Show help on help
        ///  
        ///.
        /// </summary>
        public static string help_0 {
            get {
                return ResourceManager.GetString("help_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  help( +P)
        ///  help( +P/N)
        ///  
        ///    Show help for predicate P or P/N
        ///  
        ///.
        /// </summary>
        public static string help_1 {
            get {
                return ResourceManager.GetString("help_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string history {
            get {
                return ResourceManager.GetString("history", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    Command history commands:
        ///    ========================
        ///    !!                : show numbered list of previous commands
        ///    !                 : repeat previous command
        ///    !&lt;n&gt;              : repeat command number &lt;n&gt;
        ///    !/&lt;old&gt;/&lt;new&gt;/    : repeat previous command, with &lt;old&gt; replaced by &lt;new&gt;.
        ///                         / may be any char, and the end / may be omitted.
        ///    !&lt;n&gt;/&lt;old&gt;/&lt;new&gt;/ : same for command number &lt;n&gt;
        ///    !c                : clear the history
        ///    !?                : help (t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string history__ {
            get {
                return ResourceManager.GetString("history/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string howto_create_predicate {
            get {
                return ResourceManager.GetString("howto_create_predicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  How to create a new predicate
        ///  
        ///  The easiest way to do this is by studying an existing predicate that is more or less
        ///  similar in number, type and mode (in/out/inout) to your predicate. Anyway, you will
        ///  have to do the following at least:
        ///  
        ///  1. Create an entry in BOOTSTRAP.CS. The format of such an entry is
        ///     &lt;predicate name&gt;( &lt;list of aruments&gt;) :== &lt;BI enum entry&gt;.
        ///  
        ///  2. Add a value BI.&lt;BI enum entry&gt; to the BI enum in BUILTINS.CS.
        ///  
        ///  3. Create the code for your predicate in  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string howto_create_predicate__ {
            get {
                return ResourceManager.GetString("howto_create_predicate/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string inc_counter {
            get {
                return ResourceManager.GetString("inc_counter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  inc_counter( +C)
        ///  
        ///    Increase global counter C (atom of positive integer) by 1.
        ///    The counter must have been set by set_counter_1.
        ///  
        ///.
        /// </summary>
        public static string inc_counter_1 {
            get {
                return ResourceManager.GetString("inc_counter_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  inc_counter( +C, ?M)
        ///  
        ///    Increase global counter C (atom of positive integer) by 1 and try to unify the result with M.
        ///  
        ///.
        /// </summary>
        public static string inc_counter_2 {
            get {
                return ResourceManager.GetString("inc_counter_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string integer {
            get {
                return ResourceManager.GetString("integer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  integer( +N)
        ///  
        ///    Succeeds if N is a (possibly signed) integer
        ///  
        ///.
        /// </summary>
        public static string integer_1 {
            get {
                return ResourceManager.GetString("integer_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string ip_address {
            get {
                return ResourceManager.GetString("ip_address", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  ip_address( ?A)
        ///  
        ///    Returns a string with the computer&apos;s ip address
        ///  
        ///.
        /// </summary>
        public static string ip_address_1 {
            get {
                return ResourceManager.GetString("ip_address_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  ip_address( ?A, ?L)
        ///  
        ///    Same as ip_address_1; L is a list with A split into its digital components
        ///  
        ///.
        /// </summary>
        public static string ip_address_2 {
            get {
                return ResourceManager.GetString("ip_address_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    X is Y
        ///  
        ///    Expression evaluation.
        ///    If Y is a list, all list arguments are evaluated
        ///  
        ///    LOGICAL
        ///  
        ///      false                 Logical true
        ///      true                  Logical false
        ///      if( B, X, Y)          Returns term X if boolean expression B evaluates to true, Y otherwise
        ///  
        ///    MATH -- Standard arithmetical operators and functions marked with a * also accept complex arguments
        ///  
        ///      * + / - ^             Standard arithmetical operators. &apos;+&apos; concatenates strings
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        public static string is_2 {
            get {
                return ResourceManager.GetString("is_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2_3.
        /// </summary>
        public static string json_term {
            get {
                return ResourceManager.GetString("json_term", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  json_term( ?J, ?T)
        ///  
        ///    Converts JSON structure J to Prolog term T and vice versa.
        ///  
        ///    (1) JSON to Prolog
        ///        J is a string containing a JSON structure, or a term &apos;see( &lt;filename&gt;)&apos;, where
        ///        &lt;filename&gt; is the name of a file containing a JSON structure (default extension is &quot;.json&quot;).
        ///  
        ///        IMPORTANT: In translating the string representation to a Prolog term, the following
        ///        transformation is carried out:
        ///        - The JSON object {t1, t2, ...} is converted to the Pro [rest of string was truncated]&quot;;.
        /// </summary>
        public static string json_term_2 {
            get {
                return ResourceManager.GetString("json_term_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  json_term( ?J, ?T, Options)
        ///  
        ///    Same as json_term_2, but with additional options.
        ///    Options is a list containing one or more options separated by commas.
        ///  
        ///    The following options are available (for json string/file generation only):
        ///  
        ///    - indent( &lt;indentDelta&gt; [, &lt;maxIndentLevel&gt;])
        ///  
        ///      &lt;indentDelta&gt; is an integer indicating the increment of the number of indentation spaces
        ///      preceding the next level. Default is 2.
        ///  
        ///      &lt;maxIndentLevel&gt;
        ///      No more indentation wi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string json_term_3 {
            get {
                return ResourceManager.GetString("json_term_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string keysort {
            get {
                return ResourceManager.GetString("keysort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  keysort( +L, ?R)
        ///  
        ///    List R is the sorted version of list L
        ///  
        ///.
        /// </summary>
        public static string keysort_2 {
            get {
                return ResourceManager.GetString("keysort_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string leapyear {
            get {
                return ResourceManager.GetString("leapyear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  leapyear( +Y)
        ///  
        ///    Succeeds if Y is a leap year
        ///  
        ///.
        /// </summary>
        public static string leapyear_1 {
            get {
                return ResourceManager.GetString("leapyear_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string length {
            get {
                return ResourceManager.GetString("length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  length( ?L, ?N)
        ///  
        ///    N is length of list L. At least one of both arguments must be instantiated
        ///  
        ///.
        /// </summary>
        public static string length_2 {
            get {
                return ResourceManager.GetString("length_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string license {
            get {
                return ResourceManager.GetString("license", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  license.
        ///  
        ///    Show the GNU license
        ///  
        ///.
        /// </summary>
        public static string license_0 {
            get {
                return ResourceManager.GetString("license_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string list {
            get {
                return ResourceManager.GetString("list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  list( ?L)
        ///  
        ///    Succeeds if L is a proper list.
        ///  
        ///    In addition to proper lists, there are partial lists and pseudo lists. Examples:
        ///  
        ///    - Partial list: [1,2|Z]
        ///    - Pseudo list : [1,2|3]
        ///    - Proper list : [1,2,3]
        ///  
        ///    list_1 will fail for partial lists and pseudo lists.
        ///  
        ///.
        /// </summary>
        public static string list_1 {
            get {
                return ResourceManager.GetString("list_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string listing {
            get {
                return ResourceManager.GetString("listing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    Listing of user-defined predicates
        ///  
        ///    listing( +P/N)  -- listing of predicate P with arity N
        ///    listing( +P)    -- listing of predicate P for all arities
        ///    listing        -- listing of all predicated
        ///  
        ///.
        /// </summary>
        public static string listing_1 {
            get {
                return ResourceManager.GetString("listing_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string listing0 {
            get {
                return ResourceManager.GetString("listing0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    Listing of system predicates
        ///  
        ///    listing0( +P/N)  -- listing of predicate P with arity N
        ///    listing0( +P)    -- listing of predicate P for all arities
        ///    listing0        -- listing of all predicated
        ///  
        ///.
        /// </summary>
        public static string listing0_1 {
            get {
                return ResourceManager.GetString("listing0_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string listpattern {
            get {
                return ResourceManager.GetString("listpattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    A ListPatternTerm is a list that is opened by [! and closed by !]. It is used
        ///    to specify a pattern (arrangement of list elements) that a regular list must
        ///    conform to in order to get unified with it. If the list conforms, variables in
        ///    the ListPatternTerm can be used for picking up specific terms or sublists.
        ///  
        ///    Here are some examples:
        ///  
        ///    % get the last element of a list.
        ///    % &apos;..&apos; denotes a &apos;gap&apos; consisting of an arbitrary number of elements.
        ///  
        ///    1 ?- [1,2,3,4] = [!  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string listpattern__ {
            get {
                return ResourceManager.GetString("listpattern/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string make_help_resx {
            get {
                return ResourceManager.GetString("make_help_resx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  make_help_resx
        ///  
        ///    Create the resource file &apos;CsPrologHelp.resx&apos; for this help file.
        ///    Exclude the previous version from the project, add it again, and build.
        ///  
        ///.
        /// </summary>
        public static string make_help_resx_0 {
            get {
                return ResourceManager.GetString("make_help_resx_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string maplist {
            get {
                return ResourceManager.GetString("maplist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  maplist(+Goal, +List1, ?List2)
        ///  
        ///    True if Goal can successfully be applied to all
        ///    successive pairs of elements from List1 and List2.
        ///  
        ///.
        /// </summary>
        public static string maplist_3 {
            get {
                return ResourceManager.GetString("maplist_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string maxwritedepth {
            get {
                return ResourceManager.GetString("maxwritedepth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  maxwritedepth( +N)
        ///  
        ///    When showing terms, nested terms beyond level N are shown as ...
        ///  
        ///.
        /// </summary>
        public static string maxwritedepth_1 {
            get {
                return ResourceManager.GetString("maxwritedepth_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string member {
            get {
                return ResourceManager.GetString("member", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  member( X, +L)
        ///  
        ///    Tests whether X is a member of list L. Backtracking.
        ///  
        ///.
        /// </summary>
        public static string member_2 {
            get {
                return ResourceManager.GetString("member_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string memberchk {
            get {
                return ResourceManager.GetString("memberchk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  memberchk( +X, +L)
        ///  
        ///    Non-backtracking membership test (faster than member_2 one)
        ///  
        ///.
        /// </summary>
        public static string memberchk_2 {
            get {
                return ResourceManager.GetString("memberchk_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string name {
            get {
                return ResourceManager.GetString("name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  name( A, L)
        ///  
        ///    Atom a is converted to a list of characters L (or vice versa)
        ///  
        ///.
        /// </summary>
        public static string name_2 {
            get {
                return ResourceManager.GetString("name_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string nl {
            get {
                return ResourceManager.GetString("nl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  nl
        ///  
        ///    Output a newline
        ///  
        ///.
        /// </summary>
        public static string nl_0 {
            get {
                return ResourceManager.GetString("nl_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string nodebug {
            get {
                return ResourceManager.GetString("nodebug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  nodebug
        ///  
        ///    Switch off debugging.
        ///  
        ///.
        /// </summary>
        public static string nodebug_0 {
            get {
                return ResourceManager.GetString("nodebug_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string nonvar {
            get {
                return ResourceManager.GetString("nonvar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  nonvar( ?X)
        ///  
        ///    Succeeds if X is not a variable.
        ///  
        ///  
        ///.
        /// </summary>
        public static string nonvar_1 {
            get {
                return ResourceManager.GetString("nonvar_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string noprofile {
            get {
                return ResourceManager.GetString("noprofile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  noprofile
        ///  
        ///    Switch off profiling.
        ///  
        ///.
        /// </summary>
        public static string noprofile_0 {
            get {
                return ResourceManager.GetString("noprofile_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string nospy {
            get {
                return ResourceManager.GetString("nospy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  nospy( +P/N)
        ///  nospy( +P)
        ///  
        ///    Switch off spying for predicate P/N or predicate P for all arities.
        ///  
        ///.
        /// </summary>
        public static string nospy_1 {
            get {
                return ResourceManager.GetString("nospy_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string nospyall {
            get {
                return ResourceManager.GetString("nospyall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  nospyall
        ///  
        ///    Switch off spying for all predicates.
        ///  
        ///.
        /// </summary>
        public static string nospyall_0 {
            get {
                return ResourceManager.GetString("nospyall_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string not {
            get {
                return ResourceManager.GetString("not", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  not( P)
        ///  
        ///    Succeeds if P fails and vice versa
        ///  
        ///.
        /// </summary>
        public static string not_1 {
            get {
                return ResourceManager.GetString("not_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string notrace {
            get {
                return ResourceManager.GetString("notrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  notrace
        ///  
        ///    Switch off tracing.
        ///  
        ///.
        /// </summary>
        public static string notrace_0 {
            get {
                return ResourceManager.GetString("notrace_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string now {
            get {
                return ResourceManager.GetString("now", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  now( ?H, ?M, ?S)
        ///  
        ///      Return the current time in H, M and S.
        ///  
        ///.
        /// </summary>
        public static string now_3 {
            get {
                return ResourceManager.GetString("now_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string number {
            get {
                return ResourceManager.GetString("number", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  number( +X)
        ///  
        ///    Succeed if X is a (possible signed) (complex) number.
        ///  
        ///.
        /// </summary>
        public static string number_1 {
            get {
                return ResourceManager.GetString("number_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string numbervars {
            get {
                return ResourceManager.GetString("numbervars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  numbervars(+X, +B, -E)
        ///  
        ///    This predicate provides a mechanism for grounding term X, so that it
        ///    may be analyzed.
        ///  
        ///    Each variable in X is instantiated to a term of the form &apos;$VAR&apos;(N),
        ///    where N is an integer starting from B. B is used as the value of N
        ///    for the first variable in Term (starting from the left).
        ///  
        ///    The value of E is 1 + the last value of N.
        ///  
        ///.
        /// </summary>
        public static string numbervars_3 {
            get {
                return ResourceManager.GetString("numbervars_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string numcols {
            get {
                return ResourceManager.GetString("numcols", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  numcols( ...)
        ///  
        ///    Number of columns in (i.e. width of) the DOS-box
        ///  
        ///.
        /// </summary>
        public static string numcols_1 {
            get {
                return ResourceManager.GetString("numcols_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string once {
            get {
                return ResourceManager.GetString("once", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  once( +P)
        ///  
        ///    Run predicate P once only, so skip it upon backtracking.
        ///  
        ///.
        /// </summary>
        public static string once_1 {
            get {
                return ResourceManager.GetString("once_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string op {
            get {
                return ResourceManager.GetString("op", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  op( ?P, ?A, ?N)
        ///  
        ///    Atom N is an operator with precedence P (1 &lt;= P &lt; 1200) and
        ///    associativity A (fx, fy, xfx, xfy, yfx, fx, fy).
        ///  
        ///    Also see wrap_2_3
        ///  
        ///    You can &apos;undo&apos; an operator definition by using a &apos;!&apos; as first argument:
        ///  
        ///  |  46 ?- op( 600, xfy, fred).
        ///  |
        ///  |  yes
        ///  |
        ///  |  47 ?- X = a fred b.
        ///  |
        ///  |   X = a fred b
        ///  |
        ///  |  48 ?- op( !, xfy, fred).
        ///  |
        ///  |  yes
        ///  |
        ///  |  49 ?- X = a fred b.
        ///  |
        ///  |  *** error: Syntax error -- a may not be followed by fred
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string op_3 {
            get {
                return ResourceManager.GetString("op_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string parser {
            get {
                return ResourceManager.GetString("parser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  The parser (defined in pl.grm, expanded by a preprocessor to pl.cs) splits the input
        ///  in a sequence of tokens. These tokens are actually &apos;high level&apos; tokens, because the
        ///  parser already recursively reduces a number of syntactical constructs (functors with
        ///  argument lists, terms in parentheses, ordinary lists and grammar lists in curly
        ///  brackets, stand-alone operators) to single terms. This means that the parser can
        ///  actually be regarded as a high level tokenizer, and that the token sequence  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string parser__ {
            get {
                return ResourceManager.GetString("parser/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string permutation {
            get {
                return ResourceManager.GetString("permutation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  permutation( +L1, ?L2)
        ///  
        ///    Backtrackable predicate. L2 is the list with a permutation of the elements in list L1.
        ///    Backtracking yields all possible permutations. The very first permutation yields list
        ///    L1 with all elements sorted in standard order.
        ///  
        ///    The predicate fails when called after the last permutation, or when the result of a
        ///    permutation cannot be unified with L2.
        ///  
        ///.
        /// </summary>
        public static string permutation_2 {
            get {
                return ResourceManager.GetString("permutation_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string pp_defines {
            get {
                return ResourceManager.GetString("pp_defines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  pp_defines( -D)
        ///  
        ///    Show the preprocessor definitions.
        ///  
        ///.
        /// </summary>
        public static string pp_defines_1 {
            get {
                return ResourceManager.GetString("pp_defines_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string predicate {
            get {
                return ResourceManager.GetString("predicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  predicate( +P/+N)
        ///  
        ///    Succeeds if P is a predicate with arity N
        ///  
        ///.
        /// </summary>
        public static string predicate_1 {
            get {
                return ResourceManager.GetString("predicate_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string print {
            get {
                return ResourceManager.GetString("print", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  print( +X)
        ///  
        ///    Output term X to the standard output.
        ///  
        ///.
        /// </summary>
        public static string print_1 {
            get {
                return ResourceManager.GetString("print_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string profile {
            get {
                return ResourceManager.GetString("profile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  profile
        ///  
        ///    Switch profiling on, i.e. start the registration of how many times each predicate
        ///    is called during execution.  Result can be made visible with showprofile_0_1.
        ///    Profiling has a slight impact on performance. It can be switched off with noprofile_1.
        ///  
        ///.
        /// </summary>
        public static string profile_0 {
            get {
                return ResourceManager.GetString("profile_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string put {
            get {
                return ResourceManager.GetString("put", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  put( +N)
        ///  
        ///    Write the character represented by integer N to the standard output.
        ///  
        ///.
        /// </summary>
        public static string put_1 {
            get {
                return ResourceManager.GetString("put_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string query_timeout {
            get {
                return ResourceManager.GetString("query_timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  query_timeout( +N)
        ///  
        ///    Terminate queries after they have run for N milliseconds.
        ///  
        ///.
        /// </summary>
        public static string query_timeout_1 {
            get {
                return ResourceManager.GetString("query_timeout_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string read {
            get {
                return ResourceManager.GetString("read", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  read( ?T)
        ///  
        ///    Read a term T from current input. Terms must be followed by a dot that
        ///    is the last non-white symbol on a line. A term may extend over more than
        ///    one line.
        ///  
        ///    Also see readln_1.
        ///  
        ///.
        /// </summary>
        public static string read_1 {
            get {
                return ResourceManager.GetString("read_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string readatom {
            get {
                return ResourceManager.GetString("readatom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  readatom( ?T)
        ///  
        ///    Read text from current input up to the end of line, and return it as a single atom.
        ///  
        ///.
        /// </summary>
        public static string readatom_1 {
            get {
                return ResourceManager.GetString("readatom_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string readatoms {
            get {
                return ResourceManager.GetString("readatoms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  readatoms( ?L)
        ///  
        ///    Read a line of text from current input to the end of line, convert each
        ///    individual word to an atom, and return the resulting atoms in list L.
        ///  
        ///.
        /// </summary>
        public static string readatoms_1 {
            get {
                return ResourceManager.GetString("readatoms_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string readeof {
            get {
                return ResourceManager.GetString("readeof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  readeof( +F, ?S)
        ///  
        ///    Read the entire content of file named F into a string and unify it with S.
        ///  
        ///.
        /// </summary>
        public static string readeof_2 {
            get {
                return ResourceManager.GetString("readeof_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string readln {
            get {
                return ResourceManager.GetString("readln", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  readln( ?S)
        ///  
        ///    Read a line from standard input and return it as string S.
        ///    The predicate fails at end of file.
        ///  
        ///    Notice that (in general) you cannot mix calls to read_1 and readln_1, since
        ///    read_1 is term-oriented and readln_1 is line-oriented.
        ///  
        ///.
        /// </summary>
        public static string readln_1 {
            get {
                return ResourceManager.GetString("readln_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3_4.
        /// </summary>
        public static string regex_match {
            get {
                return ResourceManager.GetString("regex_match", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  regex_match( +S, +P, -L)
        ///  
        ///    S is a string to be investigated, P is the regex pattern (following the C# syntax),
        ///    and the result L is a list containing the matching regex groups (subpatterns enclosed in
        ///    parentheses). A group in Prolog is represented as a label (group number or group name)
        ///    followed by a &apos;:&apos;, followed by a list of strings (captures) belonging to that group.
        ///  
        ///    Example:
        ///  
        ///    regex_match(&quot;21-02-1951&quot;, @&quot;(?&lt;Day&gt;\d{1,2})-(\d{1,2})-(?&lt;Year&gt;(?:\d{4}|\d{2}))&quot;, L).        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string regex_match_3 {
            get {
                return ResourceManager.GetString("regex_match_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  regex_match( +S, +P, -L, +O)
        ///  
        ///    Identical to regex_match_3. In addition, O is a list containing C#-style regex options.
        ///    The following options are supported:
        ///    - ignorecase
        ///    - multiline
        ///    - singleline
        ///    - explicitcapture
        ///    - cultureinvariant
        ///  
        ///    Cf. C# for further explanation of these options. Default is (C#) RegexOptions.None.
        ///  
        ///.
        /// </summary>
        public static string regex_match_4 {
            get {
                return ResourceManager.GetString("regex_match_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _4.
        /// </summary>
        public static string regex_replace {
            get {
                return ResourceManager.GetString("regex_replace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  regex_replace( +S, +P, +R, ?T)
        ///  
        ///    String T is the result of replacing all occurances of pattern P in S with R.
        ///  
        ///    Example:
        ///  
        ///    regex_replace(&quot;  abra  &quot;, @&quot;^\s*(.*?)\s*$&quot;, &quot;$1&quot;, R).  % strip leading and trailing spaces
        ///  
        ///    R = &quot;abra&quot;
        ///  
        ///.
        /// </summary>
        public static string regex_replace_4 {
            get {
                return ResourceManager.GetString("regex_replace_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string repeat {
            get {
                return ResourceManager.GetString("repeat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  repeat
        ///  
        ///    This predicate will always succeed on backtracking.
        ///  
        ///.
        /// </summary>
        public static string repeat_0 {
            get {
                return ResourceManager.GetString("repeat_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string retract {
            get {
                return ResourceManager.GetString("retract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  retract( +C)
        ///  
        ///    Remove asserted clause C from the program database.
        ///  
        ///.
        /// </summary>
        public static string retract_1 {
            get {
                return ResourceManager.GetString("retract_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string retractall {
            get {
                return ResourceManager.GetString("retractall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  retractall( +P)
        ///  
        ///    Remove all asserted clauses for predicate P.
        ///  
        ///.
        /// </summary>
        public static string retractall_1 {
            get {
                return ResourceManager.GetString("retractall_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string reverse {
            get {
                return ResourceManager.GetString("reverse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  reverse( ?L, ?R)
        ///  
        ///    List R is the reversed version of list L.
        ///    At least one argument must be nonvar.
        ///  
        ///.
        /// </summary>
        public static string reverse_2 {
            get {
                return ResourceManager.GetString("reverse_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string see {
            get {
                return ResourceManager.GetString("see", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  see( +F)
        ///  
        ///    Use file F with name F as standard input device. The default extension is .pl.
        ///    F must exist. see( user) will set standard input to the console.
        ///  
        ///    Multiple files can be open for reading simultaneously, and you can switch
        ///    between these by using see_1.
        ///  
        ///    The input file currently open can be closed explicitly with seen_0.
        ///  
        ///    All open input files are closed automatically when control is returned to
        ///    the user prompt.
        ///  
        ///.
        /// </summary>
        public static string see_1 {
            get {
                return ResourceManager.GetString("see_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string seeing {
            get {
                return ResourceManager.GetString("seeing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  seeing( ?F)
        ///  
        ///    Succeeds if file named F is the current input file set by see_1.
        ///  
        ///.
        /// </summary>
        public static string seeing_1 {
            get {
                return ResourceManager.GetString("seeing_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string seen {
            get {
                return ResourceManager.GetString("seen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  seen( +F)
        ///  
        ///    Close file F.
        ///  
        ///.
        /// </summary>
        public static string seen_0 {
            get {
                return ResourceManager.GetString("seen_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3_4_5.
        /// </summary>
        public static string sendmail {
            get {
                return ResourceManager.GetString("sendmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sendmail( +ToAddr, +Subject, +Body)
        ///  
        ///    Send an email to ToAddr, subject is Subject, message body is Body.
        ///    All arguments are strings.
        ///  
        ///.
        /// </summary>
        public static string sendmail_3 {
            get {
                return ResourceManager.GetString("sendmail_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sendmail( +Smtp, +ToAddr, +Subject, +Body)
        ///  
        ///    Send an email, same as sendmail_3, but with smtp name Smtp (string) added.
        ///  
        ///.
        /// </summary>
        public static string sendmail_4 {
            get {
                return ResourceManager.GetString("sendmail_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sendmail( +Smtp, +Port, +ToAddr, +Subject, +Body)
        ///  
        ///    Send an email, same as sendmail_4, but with port number Port (integer) added.
        ///  
        ///.
        /// </summary>
        public static string sendmail_5 {
            get {
                return ResourceManager.GetString("sendmail_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string set_counter {
            get {
                return ResourceManager.GetString("set_counter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  set_counter( +C, +V)
        ///  
        ///    Assign the integer value V to global counter C (atom of positive integer).
        ///    Also see inc_counter_1_2 and dec_counter_1_2.
        ///  
        ///.
        /// </summary>
        public static string set_counter_2 {
            get {
                return ResourceManager.GetString("set_counter_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string setenvvar {
            get {
                return ResourceManager.GetString("setenvvar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  setenvvar( +N, +V)
        ///  
        ///    Set the value of environment variable N to V.
        ///    You must have the right priviliges to do this.
        ///  
        ///.
        /// </summary>
        public static string setenvvar_1 {
            get {
                return ResourceManager.GetString("setenvvar_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string setof {
            get {
                return ResourceManager.GetString("setof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  setof( +X, +P, ?L)
        ///  
        ///    L contains the list with terms X that satisfy P.
        ///    Duplicates will be removed from the list (cf. bagof_3)
        ///  
        ///    Example: given age(ann, 12), age(pat, 23), age(peter, 4), age(tom, 48)
        ///  
        ///    ?- setof( N, age(N, _), L).
        ///  
        ///    L = [ann, pat, peter, tom]
        ///  
        ///.
        /// </summary>
        public static string setof_3 {
            get {
                return ResourceManager.GetString("setof_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0_1_2_3.
        /// </summary>
        public static string shell {
            get {
                return ResourceManager.GetString("shell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  shell.
        ///  
        ///    Open a DOS-box
        ///  
        ///.
        /// </summary>
        public static string shell_0 {
            get {
                return ResourceManager.GetString("shell_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  shell( dos(+Cmd))
        ///  
        ///    Run (parameter-less) DOS-command Cmd.
        ///  
        ///    The command is run asynchronously, i.e. the Prolog program is continued immediately
        ///    after the creation of the DOS box and does not wait for the DOS-box to be closed.
        ///  
        ///.
        /// </summary>
        public static string shell_1 {
            get {
                return ResourceManager.GetString("shell_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  shell( dos(+Cmd), +Args)
        ///  
        ///    Identical to shell( dos(Cmd)), but with arguments for Cmd in Args.
        ///    Args can be a single argument or a list of arguments.
        ///  
        ///  shell( +Cmd, +Args)
        ///  
        ///    Run command or executable Cmd with argument Args.
        ///    Args can be a single argument or a list of multiple arguments.
        ///    The command is run asynchronously, i.e. the Prolog program is continued immediately
        ///    after the creation of the DOS box and does not wait for the DOS-box to be closed.
        ///  
        ///  shell( +P [rest of string was truncated]&quot;;.
        /// </summary>
        public static string shell_2 {
            get {
                return ResourceManager.GetString("shell_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  shell( dos(+Cmd), +Args, ?E)
        ///  
        ///    Identical to shell( dos(Cmd), Args), but Cmd is run in synchronous mode,
        ///    i.e. the Prolog program does not continue until the DOS box is closed.
        ///    E is unified with the %ERRORLEVEL% value set by the command.
        ///    Remark: In a .bat file you can achieve this with the exit statement:
        ///  
        ///    EXIT /B &lt;numeric exit code&gt;
        ///  
        ///  shell( +Path / +Cmd, +Args, ?E)
        ///  
        ///    Identical to shell( Path/Cmd, Args, E), but Cmd is run in synchronous mode,
        ///    i.e. the Prol [rest of string was truncated]&quot;;.
        /// </summary>
        public static string shell_3 {
            get {
                return ResourceManager.GetString("shell_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string showfile {
            get {
                return ResourceManager.GetString("showfile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  showfile( +F)
        ///  
        ///    Output the contents of file F to the standard output file.
        ///  
        ///  
        ///.
        /// </summary>
        public static string showfile_1 {
            get {
                return ResourceManager.GetString("showfile_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0_1.
        /// </summary>
        public static string showprofile {
            get {
                return ResourceManager.GetString("showprofile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  showprofile
        ///  
        ///    Show profile counts: a list of all predicates that were executed since
        ///    &apos;profile_0&apos; was executed, and the number of times each predicate was called.
        ///  
        ///.
        /// </summary>
        public static string showprofile_0 {
            get {
                return ResourceManager.GetString("showprofile_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  showprofile( +N)
        ///  
        ///    Profile counts: top N values only.
        ///  
        ///.
        /// </summary>
        public static string showprofile_1 {
            get {
                return ResourceManager.GetString("showprofile_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string sort {
            get {
                return ResourceManager.GetString("sort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sort( +L, ?R)
        ///  
        ///     List R is the sorted version of list L.
        ///  
        ///.
        /// </summary>
        public static string sort_2 {
            get {
                return ResourceManager.GetString("sort_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string spy {
            get {
                return ResourceManager.GetString("spy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  spy( +P/N)
        ///  spy( +P)
        ///  
        ///    Put a spy point on predicate P/N or on all predicates P,
        ///    and switch debugging on.
        ///  
        ///.
        /// </summary>
        public static string spy_1 {
            get {
                return ResourceManager.GetString("spy_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  spy( +P/N, +Port)
        ///  spy( +P, +Port)
        ///  
        ///    Same as spy_1, but with port (call, exit, redo, fail) specified.
        ///  
        ///.
        /// </summary>
        public static string spy_2 {
            get {
                return ResourceManager.GetString("spy_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string spypoints {
            get {
                return ResourceManager.GetString("spypoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  spypoints
        ///  
        ///    Show all spypoints.
        ///  
        ///.
        /// </summary>
        public static string spypoints_0 {
            get {
                return ResourceManager.GetString("spypoints_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2_3.
        /// </summary>
        public static string sql_command {
            get {
                return ResourceManager.GetString("sql_command", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sql_command( +ConnectionInfo, +S)
        ///  
        ///    Execute the SQL-command given in string S.
        ///    A connection must have been established first, cf. sql_connect.
        ///  
        ///.
        /// </summary>
        public static string sql_command_2 {
            get {
                return ResourceManager.GetString("sql_command_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sql_command( +ConnectionInfo, +S, ?N)
        ///  
        ///    Execute the SQL-command given in string S.
        ///    N will contain the number of rows affected.
        ///  
        ///    A connection must have been established first, cf. sql_connect.
        ///  
        ///.
        /// </summary>
        public static string sql_command_3 {
            get {
                return ResourceManager.GetString("sql_command_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string sql_connect {
            get {
                return ResourceManager.GetString("sql_connect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sql_connect( +Key, +ConnectStringParameters, -ConnectionInfo)
        ///  
        ///    Purpose: to obtain a connection ConnectionInfo to a database.
        ///  
        ///    !! WARNING: if you run this command on an x64 machine and you get the following message:
        ///    !! &quot;The &apos;Microsoft.Jet.OLEDB.4.0&apos; provider is not registered on the local machine&quot;
        ///    !! then one way to repair this is to right-click on all projects -&gt; Properties -&gt; Build
        ///    !! and change from target &apos;Any cpu&apos; to target &apos;x86&apos;.
        ///    !! Do this for all projects in  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string sql_connect_3 {
            get {
                return ResourceManager.GetString("sql_connect_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string sql_connection {
            get {
                return ResourceManager.GetString("sql_connection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sql_connection( +ConnectionInfo, ?Connectstring, ?CommnendText)
        ///  
        ///    This command gives the Provider and current CommandText (SQL-statement) for ConnectionInfo term.
        ///  
        ///.
        /// </summary>
        public static string sql_connection_3 {
            get {
                return ResourceManager.GetString("sql_connection_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string sql_disconnect {
            get {
                return ResourceManager.GetString("sql_disconnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sql_disconnect( +ConnectionInfo)
        ///  
        ///    Close the database connection stored in ConnectionInfo.
        ///    ConnectionInfo must be a term that was obtained as the 3rd parameter of sql_connect_3
        ///  
        ///    This command will rarely be needed, as all database connections are automatically
        ///    closed after the execution of a query. Use it if you have an excessive (&gt; 64) number of
        ///    open connections only.
        ///  
        ///.
        /// </summary>
        public static string sql_disconnect_1 {
            get {
                return ResourceManager.GetString("sql_disconnect_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string sql_select {
            get {
                return ResourceManager.GetString("sql_select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sql_select( +ConnectionInfo, +S, ?R)
        ///  
        ///    Execute SELECT statement S, and return the first/next record of the result set in R. Example:
        ///  
        ///    1 ?- sql_connect( msaccess, &quot;SQL\\Northwind.mdb&quot;, ConnectionInfo).
        ///  
        ///    yes
        ///  
        ///    2 ?- sql_select( ConnectionInfo, &apos;SELECT * FROM Customers&apos;, S).
        ///  
        ///     S = [&apos;ALFKI&apos;, &apos;Alfreds Futterkiste&apos;, &apos;Maria Anders&apos;, &apos;Sales Representative&apos;, &apos;Obere Str. 57&apos;,
        ///     &apos;Berlin&apos;, db_null, &apos;12209&apos;, &apos;Germany&apos;, &apos;030-0074321&apos;, &apos;030-0076545&apos;]  more? (y/n)
        ///  
        ///  
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        public static string sql_select_3 {
            get {
                return ResourceManager.GetString("sql_select_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string sql_select2 {
            get {
                return ResourceManager.GetString("sql_select2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  sql_select2( +ConnectionInfo, +S, ?R)
        ///  
        ///    Same as sql_select_3, but with column names prefixed to the values in each row of R.
        ///  
        ///.
        /// </summary>
        public static string sql_select2_3 {
            get {
                return ResourceManager.GetString("sql_select2_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string stacktrace {
            get {
                return ResourceManager.GetString("stacktrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  stacktrace( ?Mode)
        ///  
        ///    stacktrace_1 controls whether a C# stacktrace is provided with each error message.
        ///    Mode can be one of the atoms &apos;on&apos; or &apos;off&apos;. Default is &apos;off&apos;.
        ///  
        ///    This predicate can also be used as a directive in a file to be consulted, e.g.:
        ///  
        ///    :- stacktrace( on).
        ///  
        ///.
        /// </summary>
        public static string stacktrace_1 {
            get {
                return ResourceManager.GetString("stacktrace_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string statistics {
            get {
                return ResourceManager.GetString("statistics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  statistics( _, _)
        ///  
        ///    Does actually do nothing extremely useful yet.
        ///  
        ///  
        ///.
        /// </summary>
        public static string statistics_2 {
            get {
                return ResourceManager.GetString("statistics_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  string( ?S)
        ///  
        ///    Succeeds if S is a string; fails otherwise.
        ///  
        ///.
        /// </summary>
        public static string string_1 {
            get {
                return ResourceManager.GetString("string_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2_4/7.
        /// </summary>
        public static string string_datetime {
            get {
                return ResourceManager.GetString("string_datetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  string_datetime( ?S, ?DT)
        ///  
        ///    Convert a string term to a DateTime term or vice versa.
        ///  
        ///  
        ///.
        /// </summary>
        public static string string_datetime_2 {
            get {
                return ResourceManager.GetString("string_datetime_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  string_datetime( ?S, ?Y, ?M, ?D)
        ///  
        ///    Convert a string term to the constituent parts of a DateTime term or vice versa.
        ///  
        ///.
        /// </summary>
        public static string string_datetime_4 {
            get {
                return ResourceManager.GetString("string_datetime_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  string_datetime( ?S, ?Y, ?Mo, ?D, ?H, ?Mo, S)
        ///  
        ///    Convert a string term to the constituent parts of a DateTime term or vice versa.
        ///  
        ///.
        /// </summary>
        public static string string_datetime_7 {
            get {
                return ResourceManager.GetString("string_datetime/7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string string_term {
            get {
                return ResourceManager.GetString("string_term", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  string_term( ?S, ?T)
        ///  
        ///    convert string S to Prolog term T and v.v.
        ///  
        ///.
        /// </summary>
        public static string string_term_2 {
            get {
                return ResourceManager.GetString("string_term_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string string_words {
            get {
                return ResourceManager.GetString("string_words", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  string_words( ?S, ?L)
        ///  
        ///    Converts a string to a list of &apos;words&apos;, or vice versa.
        ///  
        ///.
        /// </summary>
        public static string string_words_2 {
            get {
                return ResourceManager.GetString("string_words_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string stringstyle {
            get {
                return ResourceManager.GetString("stringstyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  stringstyle( ?S)
        ///  
        ///    If S is one of the atoms &apos;csharp&apos; or &apos;iso&apos;, the way strings are represented will
        ///    be set accordingly. In Standard Prolog, strings are represented as lists of character
        ///    codes (&apos;iso&apos;). With &apos;csharp&apos;, strings are represented as, eh, well, as regular strings.
        ///    If S is a variable, it will be given the value of the current setting.
        ///  
        ///    Example:
        ///  
        ///    |  1 ?- stringstyle( iso).
        ///    |
        ///    |  yes
        ///    |
        ///    |  2 ?- X = &quot;hello, world&quot;.
        ///    |
        ///    |   X = [104,  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string stringstyle_1 {
            get {
                return ResourceManager.GetString("stringstyle_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string succ {
            get {
                return ResourceManager.GetString("succ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  succ( ?N0, ?N1)
        ///  
        ///    Integer N1 is equal to N0+1. At least one of the arguments must be instantiated.
        ///  
        ///.
        /// </summary>
        public static string succ_2 {
            get {
                return ResourceManager.GetString("succ_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string tab {
            get {
                return ResourceManager.GetString("tab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  tab( +N)
        ///  
        ///    Outputs N spaces to the current output.
        ///  
        ///.
        /// </summary>
        public static string tab_1 {
            get {
                return ResourceManager.GetString("tab_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string talk {
            get {
                return ResourceManager.GetString("talk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  A demo program described in the following book:
        ///  TALK (Fernando Pereira, Stuart Shieber)
        ///  Prolog and Natural Language Analysis
        ///  pp. 149+
        ///  
        ///  A PDF-version of this book (obtained from Internet after googling
        ///  &quot;Fernando Pereira TALK-program&quot;) can be found in the TALK directory.
        ///  
        ///  talk :- [&apos;TALK\\talk&apos;].
        ///  
        ///  Start the program by entering &apos;go.&apos;; end by entering an empty line.
        ///  
        ///  Sample dialog (TALK-responses not shown) (notice: no terminating dots):
        ///  
        ///  &gt;&gt; principia is a book
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string talk__ {
            get {
                return ResourceManager.GetString("talk/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string tell {
            get {
                return ResourceManager.GetString("tell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  tell( +F)
        ///  
        ///    Use file F with name F as standard output device. The default extension is .pl.
        ///    If F exists and tell_1 is called for the first time, the file&apos;s content will be
        ///    deleted. If F does not exist, it will be created.
        ///    tell( user) will set standard output to the console.
        ///  
        ///    Multiple files can be open for writing simultaneously, and you can switch
        ///    between these by using tell_1.
        ///  
        ///    The output file currently open can be closed explicitly with told_0.
        ///  
        ///    All [rest of string was truncated]&quot;;.
        /// </summary>
        public static string tell_1 {
            get {
                return ResourceManager.GetString("tell_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string telling {
            get {
                return ResourceManager.GetString("telling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  telling( ?F)
        ///  
        ///    Succeeds if file named F is the current output file set by tell_1.
        ///  
        ///.
        /// </summary>
        public static string telling_1 {
            get {
                return ResourceManager.GetString("telling_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2_3_4_5.
        /// </summary>
        public static string term_pattern {
            get {
                return ResourceManager.GetString("term_pattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  term_pattern( +T, +P)
        ///  
        ///    Search T for subterms that unify with P.
        ///    Single variable subterms are exluded
        ///    from unification with P, except when P itself is a term with arity 0.
        ///    Variables in P are instantiated.
        ///    Use backtracking in order to find all matches.
        ///  
        ///.
        /// </summary>
        public static string term_pattern_2 {
            get {
                return ResourceManager.GetString("term_pattern_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  term_pattern( +T, +P, -Loc)
        ///  
        ///    Identical to term_pattern_2; Loc is a list of integers uniquely identifying
        ///    the location in the term (e.g. [2, 4] means: the argument 4 of argument 2 of T).
        ///  
        ///.
        /// </summary>
        public static string term_pattern_3 {
            get {
                return ResourceManager.GetString("term_pattern_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  term_pattern( +T, +P, +Dmin, +Dmax)
        ///  
        ///    Identical to term_pattern_2, but with the added possibility to
        ///    specify the depths (levels) in T where P may be searched for.
        ///  
        ///.
        /// </summary>
        public static string term_pattern_4 {
            get {
                return ResourceManager.GetString("term_pattern_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  term_pattern( +T, +P, +Dmin, +Dmax, -Loc)
        ///  
        ///    Identical to term_pattern_4, but with the added possibility to
        ///    return the location where P was found.
        ///  
        ///.
        /// </summary>
        public static string term_pattern_5 {
            get {
                return ResourceManager.GetString("term_pattern_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    throw( +E, +S)
        ///    throw( +S, +A)
        ///  
        ///    Raise an exception and display string S.
        ///    S is a C#-style format string; the list A contains the arguments.
        ///  
        ///    throw_2 will cause the execution to be handed over to a CATCH-clause
        ///    belonging to the TRY in which throw was performed, or to an enclosing
        ///    CATCH-clause of an enclosing (calling) predicate.
        ///    An exception class atom E can be specified in order to search for a
        ///    similarly named CATCH-clause.
        ///  
        ///.
        /// </summary>
        public static string throw_2 {
            get {
                return ResourceManager.GetString("throw_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///    throw( +E, +S, +A)
        ///  
        ///    Raise an exception and display string S.
        ///    S is a C#-style format string; the list A contains the arguments.
        ///  
        ///    throw_3 will cause the execution to be handed over to a CATCH-clause
        ///    belonging to the TRY in which throw was performed, or to an enclosing
        ///    CATCH-clause of an enclosing (calling) predicate.
        ///    An exception class atom E can be specified in order to search for a
        ///    similarly named CATCH-clause.
        ///  
        ///.
        /// </summary>
        public static string throw_3 {
            get {
                return ResourceManager.GetString("throw_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_4.
        /// </summary>
        public static string timespan {
            get {
                return ResourceManager.GetString("timespan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  timespan( ?X)
        ///  
        ///    Succeeds if X is a Prolog term of type TimeSpan
        ///  
        ///.
        /// </summary>
        public static string timespan_1 {
            get {
                return ResourceManager.GetString("timespan_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  timespan( ?T, ?H, ?M, ?S)
        ///  
        ///    If DT is an instantiated TimeSpan term, the interpreter will attempt to bind
        ///    its constituent parts (Hours, Minutes, Seconds) to the remaining arguments.
        ///  
        ///    Id DT is a var, the other arguments must all be instantiated, and these
        ///    will be used to populate a TimeSpan term that will be bound to DT.
        ///  
        ///    In all other cases, timespan_4 will fail.
        ///  
        ///.
        /// </summary>
        public static string timespan_4 {
            get {
                return ResourceManager.GetString("timespan_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string today {
            get {
                return ResourceManager.GetString("today", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  today( ?Y, ?M, ?D)
        ///  
        ///    Return today&apos;s date in Y, M, D.
        ///  
        ///.
        /// </summary>
        public static string today_3 {
            get {
                return ResourceManager.GetString("today_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string told {
            get {
                return ResourceManager.GetString("told", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  told( +F)
        ///  
        ///    Close file F.
        ///  
        ///.
        /// </summary>
        public static string told_0 {
            get {
                return ResourceManager.GetString("told_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string trace {
            get {
                return ResourceManager.GetString("trace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  trace
        ///  
        ///    Switch on tracing.
        ///  
        ///.
        /// </summary>
        public static string trace_0 {
            get {
                return ResourceManager.GetString("trace_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string treeprint {
            get {
                return ResourceManager.GetString("treeprint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  treeprint( +T)
        ///  
        ///    Print term T in tree format
        ///  
        ///.
        /// </summary>
        public static string treeprint_1 {
            get {
                return ResourceManager.GetString("treeprint_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  true
        ///  
        ///    Succeed
        ///  
        ///.
        /// </summary>
        public static string true_0 {
            get {
                return ResourceManager.GetString("true_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (*).
        /// </summary>
        public static string try_catch {
            get {
                return ResourceManager.GetString("try_catch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  It is possible to use a TRY/CATCH construct in a predicate.
        ///  It has the following syntax:
        ///  
        ///  TRY
        ///  (&lt;terms&gt;)
        ///  CATCH [&lt;exception class&gt;] [, M]
        ///  (&lt;terms&gt;)
        ///  CATCH [&lt;exception class&gt;] [, M]
        ///  (&lt;terms&gt;) ...
        ///  
        ///  So, a TRY/CATCH statement can have more than one CATCH-clauses, each labeled
        ///  with the name of an &apos;exception class&apos; that can be given freely by the user and
        ///  that corresponds to the exception class name in the throw_2_3 predicate.
        ///  
        ///  When a throw is executed within a TRY-bod [rest of string was truncated]&quot;;.
        /// </summary>
        public static string try_catch__ {
            get {
                return ResourceManager.GetString("try_catch/*", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0.
        /// </summary>
        public static string undefineds {
            get {
                return ResourceManager.GetString("undefineds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  undefineds
        ///  
        ///    Output the names of the predicates that are currently undefined (all
        ///    predicate clauses currently in the predicate database are scanned).
        ///  
        ///.
        /// </summary>
        public static string undefineds_0 {
            get {
                return ResourceManager.GetString("undefineds_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string unifiable {
            get {
                return ResourceManager.GetString("unifiable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  unifiable( ?X, ?Y)
        ///  
        ///    Succeeds if X can be unified with Y, but actual unification
        ///    does not take place.
        ///  
        ///.
        /// </summary>
        public static string unifiable_2 {
            get {
                return ResourceManager.GetString("unifiable_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string username {
            get {
                return ResourceManager.GetString("username", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  username( ?N)
        ///  
        ///    Returns the OS username.
        ///  
        ///.
        /// </summary>
        public static string username_1 {
            get {
                return ResourceManager.GetString("username_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string userroles {
            get {
                return ResourceManager.GetString("userroles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  userroles( -L)
        ///  
        ///    Returns a list of OS roles the user has.
        ///  
        ///.
        /// </summary>
        public static string userroles_1 {
            get {
                return ResourceManager.GetString("userroles_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string validdate {
            get {
                return ResourceManager.GetString("validdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  validdate( +Y, +M, +D)
        ///  
        ///    Succeeds if Y, M, D represents a valid date.
        ///  
        ///.
        /// </summary>
        public static string validdate_3 {
            get {
                return ResourceManager.GetString("validdate_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3.
        /// </summary>
        public static string validtime {
            get {
                return ResourceManager.GetString("validtime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  validtime( +H, +M, +S)
        ///  
        ///    Succeeds if H, M, S represents a valid time.
        ///  
        ///.
        /// </summary>
        public static string validtime_3 {
            get {
                return ResourceManager.GetString("validtime_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string var {
            get {
                return ResourceManager.GetString("var", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  var( ?X)
        ///  
        ///    Succeeds if X is an unbound variable.
        ///  
        ///  
        ///.
        /// </summary>
        public static string var_1 {
            get {
                return ResourceManager.GetString("var_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  var( ?X, ?N)
        ///  
        ///    Succeeds if X is an unbound variable and N is the name &quot;X&quot; of X.
        ///  
        ///.
        /// </summary>
        public static string var_2 {
            get {
                return ResourceManager.GetString("var_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string version {
            get {
                return ResourceManager.GetString("version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  version( -V, -D)
        ///  
        ///    Show the version and the build date.
        ///  
        ///.
        /// </summary>
        public static string version_2 {
            get {
                return ResourceManager.GetString("version_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_4.
        /// </summary>
        public static string weekno {
            get {
                return ResourceManager.GetString("weekno", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  weekno( ?N)
        ///  
        ///    Gives the number of the current week, according to the ISO definition.
        ///  
        ///  
        ///.
        /// </summary>
        public static string weekno_1 {
            get {
                return ResourceManager.GetString("weekno_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  weekno( +Y, +M, +D, ?N)
        ///  
        ///    Gives the number of the week in which Y, M, D lies,
        ///    according to the ISO definition
        ///  
        ///.
        /// </summary>
        public static string weekno_4 {
            get {
                return ResourceManager.GetString("weekno_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _0_1.
        /// </summary>
        public static string workingdir {
            get {
                return ResourceManager.GetString("workingdir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  workingdir
        ///  
        ///    Resets the working directory to the default value as found in the config
        ///    file, or, if missing, to the directory in which CsProlog.exe resides.
        ///  
        ///.
        /// </summary>
        public static string workingdir_0 {
            get {
                return ResourceManager.GetString("workingdir_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  workingdir( ?D)
        ///  
        ///    Get or set the working directory, i.e. the default directory
        ///    for consulting, reading and writing.
        ///  
        ///    Special symbols are:
        ///    &apos;%desktop&apos; : the Desktop directory
        ///    &apos;%exedir&apos;  : the directory in which CsProlog.exe resides
        ///  
        ///    The default value can be set in the config file.
        ///  
        ///    :- workingdir( +D) can also be used as directive in a consulted file.
        ///  
        ///.
        /// </summary>
        public static string workingdir_1 {
            get {
                return ResourceManager.GetString("workingdir_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2_3.
        /// </summary>
        public static string wrap {
            get {
                return ResourceManager.GetString("wrap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  wrap( +LB)
        ///  
        ///    A wrap is a pair of user-defined brackets.
        ///  
        ///    In some cases it can be useful (and contribute to increased readability) to use pairs of
        ///    brackets that are different from the standard &apos;(&apos;, &apos;{&apos;, &apos;[&apos; and &apos;&lt;&apos; bracket pairs. You
        ///    can achieve this with the wrap_1_2_3 predicate/directive. The argument of wrap_1 is the
        ///    left bracket you want to define; the corresponding right bracket is formed by reversing
        ///    the left bracket string representation, thereby replacing any  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string wrap_1 {
            get {
                return ResourceManager.GetString("wrap_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  (1) wrap( +LB, +RB)
        ///  
        ///     The functionality is identical to wrap_1, but here you define the right bracket explicitly.
        ///  
        ///  (2) wrap( +LB, |).
        ///  
        ///     The functionality is identical to wrap_1, but the resulting structure will internally be a
        ///     list structure that (therefore) has a head and a tail. See the examples below.
        ///  
        ///  |  4 ?- wrap(&apos;(!&apos;, |).
        ///  |
        ///  |  yes
        ///  |
        ///  |  5 ?- (! 1, 2, 3 !) = (! H | T !).
        ///  |
        ///  |   H = 1
        ///  |   T = (! 2, 3 !)
        ///  |
        ///  |  6 ?- wrap(&apos;(!&apos;).  % no list str [rest of string was truncated]&quot;;.
        /// </summary>
        public static string wrap_2 {
            get {
                return ResourceManager.GetString("wrap_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  wrap( +LB, |, +RB).
        ///  
        ///    This form is identical in functionality to the list form of wrap_2, but with the right bracket
        ///    given explicitly. See the example below.
        ///  
        ///  |  11 ?- wrap(&apos;(!&apos;, |, &apos;!}&apos;).
        ///  |
        ///  |  yes
        ///  |
        ///  |  12 ?- X = (! a, b, c !}.
        ///  |
        ///  |   X = (! a, b, c !}
        ///  |
        ///  |  13 ?- (! a, b, c !} =.. L.
        ///  |
        ///  |   L = [&apos;(!..!}&apos;, a, (! b,c !}]
        ///  |
        ///  
        ///.
        /// </summary>
        public static string wrap_3 {
            get {
                return ResourceManager.GetString("wrap_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1.
        /// </summary>
        public static string write {
            get {
                return ResourceManager.GetString("write", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  write( ?X)
        ///  
        ///    Output term X to standard output.
        ///  
        ///.
        /// </summary>
        public static string write_1 {
            get {
                return ResourceManager.GetString("write_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2.
        /// </summary>
        public static string writef {
            get {
                return ResourceManager.GetString("writef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  writef( S, L)
        ///  
        ///    Output C#-style format string S with arguments in list L.
        ///    If there is just one argument, it does not have to be in a list.
        ///  
        ///.
        /// </summary>
        public static string writef_2 {
            get {
                return ResourceManager.GetString("writef_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_1.
        /// </summary>
        public static string writeln {
            get {
                return ResourceManager.GetString("writeln", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  writelnf( S, L)
        ///  
        ///    Same as writef( X), but output is terminated with a newline.
        ///  
        ///.
        /// </summary>
        public static string writeln_1 {
            get {
                return ResourceManager.GetString("writeln_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _2_3.
        /// </summary>
        public static string xml_term {
            get {
                return ResourceManager.GetString("xml_term", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  xml_term( ?Xml, ?T)
        ///    Converts xml-structure Xml to Prolog term Term and vice versa.
        ///  
        ///    Xml can be a string, but can also be a file specification:
        ///  
        ///    - see( F)  : File F is opened for reading and its XML content is
        ///                 transformed to Prolog term T
        ///  
        ///    - tell( F) : File F is opened for writing, and Prolog term T is
        ///                 transformed to an XML strucure and written to F.
        ///  
        ///    The best way to understand how to use this predicate is to study a
        ///    number o [rest of string was truncated]&quot;;.
        /// </summary>
        public static string xml_term_2 {
            get {
                return ResourceManager.GetString("xml_term_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  xml_term( ?Xml, ?T, +Options)
        ///  
        ///    Same as xml_term_2, but with a list of possible options that can be specified.
        ///    Options is a list of options:
        ///  
        ///    encoding( &lt;Encoding type&gt; ) : Encoding (integer or atom) to appear in XML-declaration,
        ///                                  e.g. 65001 = &apos;utf-8&apos;. For both xml -&gt; term and term -&gt; xml.
        ///                                  See source file simpleDOMParser.cs (GetEncodingFromString)
        ///                                  for the complete list of possible [rest of string was truncated]&quot;;.
        /// </summary>
        public static string xml_term_3 {
            get {
                return ResourceManager.GetString("xml_term_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _3_2_1.
        /// </summary>
        public static string xml_transform {
            get {
                return ResourceManager.GetString("xml_transform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  xml_transform( +Xml)
        ///  
        ///    Xml is an instantiated strings containing the name of an XML-file, to which a stylesheet is applied.
        ///    The stylesheet name is assumed to be identical to the XML-file name, but with extension .xsl.
        ///    The name of the resulting file is assumed to be identical to the XML-file name, but with extension .html.
        ///  
        ///.
        /// </summary>
        public static string xml_transform_1 {
            get {
                return ResourceManager.GetString("xml_transform_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  xml_transform( +Xml, +Xsl)
        ///  
        ///    Xml, Xsl are instantiated strings containing file names.
        ///    Stylesheet Xsl is applied to XML-file Xml. The result is written to an HTML-file
        ///    with the same name as the XML-file, but with extension .html
        ///  
        ///.
        /// </summary>
        public static string xml_transform_2 {
            get {
                return ResourceManager.GetString("xml_transform_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  xml_transform( +Xml, +Xsl, +Html)
        ///  
        ///    Xml, Xsl and Html are instantiated strings containing file names.
        ///    Stylesheet Xsl is applied to XML-file Xml yielding HTML-file Html
        ///  
        ///.
        /// </summary>
        public static string xml_transform_3 {
            get {
                return ResourceManager.GetString("xml_transform_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to _1_2.
        /// </summary>
        public static string xmltrace {
            get {
                return ResourceManager.GetString("xmltrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  xmltrace( +F)
        ///  
        ///    Send the execution tree of the next command to file F.
        ///  
        ///.
        /// </summary>
        public static string xmltrace_1 {
            get {
                return ResourceManager.GetString("xmltrace_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   
        ///  xmltrace( +F, +N)
        ///  
        ///    Send the execution tree of the next command to file F, but the first N elements only..
        /// </summary>
        public static string xmltrace_2 {
            get {
                return ResourceManager.GetString("xmltrace_2", resourceCulture);
            }
        }
    }
}
